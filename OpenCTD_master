#include <SoftwareSerial.h> //imports the SoftwareSerial library for use by EC circuit
#include <OneWire.h> //imports the OneWire library needed for both temperature and conductivity
#include <DallasTemperature.h> //imports the DallasTemperature library neede to query individual thermistors for temperature
#include <Wire.h> //imports the Wire library needed for pressure
#include <MS5803_14.h> //Imports the specific library for the 14bar pressure sensor
#include <SPI.h> //imports the SPI library for the SD card reader
#include <SD.h> //imports the SD library that runs the SD card reader

float tempA; //create a floating variable for TempA
float tempB; //create a floating variable for TempB
float tempC; //create a floating variable for TempC
float EC_float=0; //creates a floating variable for electrical conductivity.
float TDS_float ; //creates a floating variable for total dissolved solids.
float SAL__float; //creates a floating variable for salinity.
float GRAV__float; //creates a flaoting variable for specific gravity.

char EC_data[48]; //creates a 48 byte character array to hold incoming data from the conductivity circuit. 
char *EC; //character pointer for string parsing 
char *TDS; //character pointer for string parsing
char *SAL; //character pointer for string parsing
char *GRAV; //character pointer for string parsing

byte received_from_sensor=0; //determines how many characters have been received.
byte string_received=0; //determines if it received a string from the EC circuit.

#define rx 2 //sets rx to pin 2 for conductivity
#define tx 3 //sets tx to pin 3 for conductivity
#define ONE_WIRE_BUS 7 //sets input pin for temperature battery to D7

SoftwareSerial myserial(rx, tx); //defines the SoftwareSerial port for conductivity
OneWire oneWire(ONE_WIRE_BUS); //defines the OneWire port for temperature
DallasTemperature sensors(&oneWire); //defines DallasTemperature input based on OneWire
MS_5803 sensor = MS_5803(512); //defines pressure sensor

void setup(void) //start it up
{
  Serial.begin(9600); //sets baud rate
  myserial.begin(9600); //sets baud rate for conductivty circuit
  
  pinMode(10, OUTPUT); //sets data output pin for SD card reader
  
  while (!Serial) {} //initializes SD card reader

  if (!SD.begin(4)) { //test to see if SD card reader is functioning
    Serial.println("Card failed, or not present"); //outputs to serial monitor if SD card doesn't work
    return; 
    }
  
  delay(500); //waits half a second before continuing
  
  sensors.begin(); //intializes the temperature sensors
  delay(250); //waits a quarter second to continue
  
  sensor.initializeMS_5803();  //intialize pressure sensor
  delay(250); //waits a quarter second to continue
  
}

void loop(void) //let's get going!
{ 
  if(myserial.available() > 0){ //checks if EC circuit is sending data
    received_from_sensor=myserial.readBytesUntil(13,EC_data,48); //reads data sent by EC circuit and counts how many characters have been sent
    EC_data[received_from_sensor]=0; //adds a zero to the array after the last character is recieved 
    }
    
  if((EC_data[0] >= 48) && (EC_data[0] <=57)){ //parses data is EC_data is a digit, not a letter
    pars_data(); //parses EC data
    }
     
  delay(10); //waits 10 milliseconds
  
  sensors.requestTemperatures();  //pings temperature sensors
  sensor.readSensor(); //reads pressure sensor
  
  tempA = sensors.getTempCByIndex(0); //reads first temperature sensor
  tempB = sensors.getTempCByIndex(1); //reads second temperature sensor
  tempC = sensors.getTempCByIndex(2); //reads thrid temperature sensor
  
  File dataFile = SD.open("datalog.txt", FILE_WRITE); //opens data file

  if (dataFile) { //logs data on SD card
    dataFile.print(tempA); //C
    dataFile.print("  ");
    dataFile.print(tempB);  
    dataFile.print("  "); 
    dataFile.print(tempC); 
    dataFile.print("  "); 
    dataFile.print(sensor.pressure()); //in milliBar
    dataFile.print("  "); 
    dataFile.println(EC); //electrical conductivity, microsiemens, uncorrected
    dataFile.close(); 
    } 

/* comment in for serial monitor diagnostics
  else { //Data
    Serial.println("error opening datalog.txt"); //Data
    
    } //Data
*/


  Serial.print(tempA); //Temperature
  Serial.print("  "); //Tab
  Serial.print(tempB);  //Temperature
  Serial.print("  "); //Tab
  Serial.print(tempC); //Temperature
  Serial.print("  "); //Tab
  Serial.print(sensor.pressure()); //Pressure
  Serial.print("  "); //Tab
  Serial.print(SAL); //Salinity
  Serial.print("  "); //Tab
  Serial.println(EC); //Electrical conductivity

 
  delay(50); //waits 50 milliseconds
}

void pars_data(){ //function to parse data from EC Circuit

  EC=strtok(EC_data, ",");               
  TDS=strtok(NULL, ",");                
  SAL=strtok(NULL, ",");                
  GRAV=strtok(NULL, ",");                

  }
