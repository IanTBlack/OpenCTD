#include <SoftwareSerial.h>     // For use by EC circuit.
#include <OneWire.h>            // For both temperature and conductivity.
#include <DallasTemperature.h>  // DallasTemperature library to query individual thermistors for temperature.
#include <Wire.h>               // For pressure.
#include <MS5803_14.h>          // Specific library for the 14bar pressure sensor.
#include <SPI.h>                // For the SD card reader.
#include <SD.h>                 // Runs the SD card reader


// Declare global variables.
float tempA;
float tempB;
float tempC;
float EC_float = 0;  // Electrical conductivity.
float TDS_float;     // Total dissolved solids.
float SAL__float;    // Salinity.
float GRAV__float;   // Specific gravity.

char EC_data[48];    // A 48 byte character array to hold incoming data from the conductivity circuit. 
char *EC;            // Character pointer for string parsing.
char *TDS;           // Character pointer for string parsing.
char *SAL;           // Character pointer for string parsing.
char *GRAV;          // Character pointer for string parsing.

byte received_from_sensor = 0;  // How many characters have been received.
byte string_received = 0;       // Whether it received a string from the EC circuit.

#define rx 2  // Set rx to pin 2 for conductivity.
#define tx 3  // Set tx to pin 3 for conductivity.
#define ONE_WIRE_BUS 7  // Set input pin for temperature battery to D7.

SoftwareSerial myserial(rx, tx);      // Define the SoftwareSerial port for conductivity.
OneWire oneWire(ONE_WIRE_BUS);        // Define the OneWire port for temperature.
DallasTemperature sensors(&oneWire);  // Define DallasTemperature input based on OneWire.
MS_5803 sensor = MS_5803(512);        // Define pressure sensor.


// Starts it up.
//
void setup(void) {

  Serial.begin(9600);   // Set baud rate.
  myserial.begin(9600); // Set baud rate for conductivty circuit.
  
  pinMode(10, OUTPUT);  // Set data output pin for the SD card reader.
  
  while (!Serial) {}    // Initialize the SD card reader.

  // Test to see if the SD card reader is functioning.
  if (!SD.begin(4)) {
    Serial.println("Card failed, or not present");  // Log to serial monitor if SD card doesn't work.
    return; 
  }
  delay(500);  // Wait half a second before continuing.
  
  sensors.begin();  // Intialize the temperature sensors.
  delay(250);       // Wait a quarter second to continue.
  
  sensor.initializeMS_5803();  // Intialize the pressure sensor.
  delay(250);                  // Wait a quarter second to continue.

}


// Let's get going!
//
void loop(void) {

  // Read any pending data from the EC circuit.
  if (myserial.available() > 0) {
    received_from_sensor = myserial.readBytesUntil(13, EC_data, 48);

    // Null terminate the data by setting the value after the final character to 0.
    EC_data[received_from_sensor] = 0;
  }

  // TODO: Add a comment here depicting an example string from the EC circuit.

  // Parse data, if EC_data begins with a digit, not a letter (testing ASCII values).
  if ((EC_data[0] >= 48) && (EC_data[0] <=57)) {
    parse_data();
  }

  delay(10);  // Wait 10 milliseconds.

  sensors.requestTemperatures();  // Ping temperature sensors.
  sensor.readSensor();  // Read pressure sensor.

  // Read temperature sensors.
  tempA = sensors.getTempCByIndex(0);
  tempB = sensors.getTempCByIndex(1);
  tempC = sensors.getTempCByIndex(2);
  
  // Log data as a delimited list.
  // TODO: Spaces ("  ") vs Tab ("\t") ?
  //
  // TempA (???)
  // TempB (???)
  // TempC (???)
  // Pressure (milliBars)
  // Electrical conductivity (microsiemens, uncorrected)

  // Log to the SD card...
  File dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (dataFile) {
    dataFile.print(tempA);
    dataFile.print("  ");
    dataFile.print(tempB);
    dataFile.print("  ");
    dataFile.print(tempC);
    dataFile.print("  ");
    dataFile.print(sensor.pressure());
    dataFile.print("  ");
    dataFile.println(EC);
    dataFile.close();
  }
  else {
    // TODO: Serial monitor diagnostics.

    //Serial.println("Error opening datalog.txt");
  }

  // Log to the serial monitor...
  Serial.print(tempA);
  Serial.print("  ");
  Serial.print(tempB);
  Serial.print("  ");
  Serial.print(tempC);
  Serial.print("  ");
  Serial.print(sensor.pressure());
  Serial.print("  ");
  Serial.print(SAL);
  Serial.print("  ");
  Serial.print(EC);
  Serial.println("");

  delay(50);  // Wait 50 milliseconds.
}


// Parses data from the EC Circuit.
//
void parse_data() {

  EC = strtok(EC_data, ",");               
  TDS = strtok(NULL, ",");                
  SAL = strtok(NULL, ",");                
  GRAV = strtok(NULL, ",");                

}
